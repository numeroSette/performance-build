name: Production (main.yml)

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: application

jobs:

  build:
    name: Build application
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: '^1.13.1' # The Go version to download (if necessary) and use.
    - uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - run: go env          
    # - run: cd cmd && go build -o bin
    
  #     - name: Read Docker Image Identifiers
  #       id: docker_config
  #       run: echo ::set-output name=image_repository::$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')
  
  #     - name: Build image
  #       run: docker build . --file Dockerfile --tag $IMAGE_NAME

  #     - name: Log into registry
  #       run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

  #     - name: Push image
  #       run: |
  #         IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

  #         # Change all uppercase to lowercase
  #         IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
         
  #         VERSION=LATEST

  #         echo IMAGE_ID=$IMAGE_ID
  #         echo VERSION=$VERSION

  #         docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
  #         docker push $IMAGE_ID:$VERSION

  # functional_test:
  #   name: Test application
  #   runs-on: ubuntu-20.04

  #   needs:
  #     - build

  #   steps:

  #     - name: Read Docker Image Identifiers
  #       id: docker_config
  #       run: echo ::set-output name=image_repository::$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')

  #     - name: Log into registry
  #       run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
      
  #     - name: Pull application image
  #       run: docker pull docker.pkg.github.com/${{ steps.docker_config.outputs.image_repository }}/application:latest

  #     - name: Run application
  #       run: |
  #         docker run --rm \
  #           --name application \
  #           -d \
  #           -p 8080:8080 \
  #           -p 8081:8081 \
  #           docker.pkg.github.com/${{ steps.docker_config.outputs.image_repository }}/application:latest

  #     - name: Test URL response (/get-random-number)
  #       run: curl -fv http://localhost:8080/get-random-number

  #     - name: Test URL response (/get-random-number-native)
  #       run: curl -fv http://localhost:8080/get-random-number-native 

  #     - name: Test URL response (/metrics)
  #       run: curl -fv http://localhost:8081/metrics

  #     - name: Benchmark method GetRandomNumber (/get-random-number)
  #       run: docker exec -i application bash -c "cd cmd/get-random-number && go test -run=Bench -bench=."

  #     - name: Benchmark method GetRandomNumberNative (/get-random-number-native)
  #       run: docker exec -i application bash -c "cd cmd/get-random-number-native && go test -run=Bench -bench=."

  #     - name: Stop application
  #       run: docker stop application